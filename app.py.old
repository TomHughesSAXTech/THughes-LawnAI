#!/usr/bin/env python3
"""
Hughes Lawn AI - Cloud Version for Azure Deployment
Simplified version without local dependencies
"""

import os
import json
import requests
from flask import Flask, jsonify, request, render_template_string
from flask_cors import CORS
from datetime import datetime, timedelta
import logging

app = Flask(__name__)
CORS(app)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Environment variables for configuration
ECOWITT_APP_KEY = os.environ.get('ECOWITT_APP_KEY', '14CF42F092D6CC8C5421160A37A0417A')
ECOWITT_API_KEY = os.environ.get('ECOWITT_API_KEY', 'e5f2d6ff-2323-477e-8041-6e284b401b83')
ECOWITT_MAC = os.environ.get('ECOWITT_MAC', '34:94:54:96:22:F5')
RAINBIRD_IP = os.environ.get('RAINBIRD_IP', 'q0852082.eero.online')
RAINBIRD_PORT = os.environ.get('RAINBIRD_PORT', '71.217.130.52')
N8N_WEBHOOK_URL = os.environ.get('N8N_WEBHOOK_URL', 'https://workflows.saxtechnology.com/webhook/hughes-lawn-ai')

# Simple HTML Dashboard
DASHBOARD_HTML = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hughes Lawn AI - Smart Irrigation System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            padding: 40px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            margin-bottom: 30px;
        }
        h1 {
            font-size: 3em;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #4ade80 0%, #22c55e 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .card h2 {
            margin-bottom: 15px;
            color: #4ade80;
        }
        .status {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .online { background: #4ade80; }
        .offline { background: #f44336; }
        .pending { background: #ffa500; }
        .data-item {
            margin: 10px 0;
            padding: 10px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
        }
        .btn {
            background: #4ade80;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1em;
            cursor: pointer;
            margin-top: 15px;
            width: 100%;
        }
        .btn:hover {
            background: #22c55e;
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üå± Hughes Lawn AI</h1>
            <p class="subtitle">Intelligent Lawn Care System - Cloud Edition</p>
            <p>Location: Fuquay-Varina, NC | Grass: TifTuf Bermuda</p>
        </div>
        
        <div class="grid">
            <div class="card">
                <h2>üå§Ô∏è Weather Station</h2>
                <div class="status">
                    <span class="status-dot online"></span>
                    <span>Ecowitt Connected</span>
                </div>
                <div class="data-item">
                    <strong>Temperature:</strong> <span id="temp">Loading...</span>
                </div>
                <div class="data-item">
                    <strong>Humidity:</strong> <span id="humidity">Loading...</span>
                </div>
                <div class="data-item">
                    <strong>Rainfall (24h):</strong> <span id="rainfall">Loading...</span>
                </div>
            </div>
            
            <div class="card">
                <h2>üöø RainBird Controller</h2>
                <div class="status">
                    <span class="status-dot pending"></span>
                    <span>Dynamic DNS: {{ rainbird_ip }}</span>
                </div>
                <div class="data-item">
                    <strong>Zones:</strong> 7 configured
                </div>
                <div class="data-item">
                    <strong>Status:</strong> Ready for commands
                </div>
                <button class="btn" onclick="testConnection()">Test Connection</button>
            </div>
            
            <div class="card">
                <h2>üíß Soil Moisture</h2>
                <div class="data-item">
                    <strong>Front Yard:</strong> <span id="moisture1">--</span>%
                </div>
                <div class="data-item">
                    <strong>Backyard Playset:</strong> <span id="moisture2">--</span>%
                </div>
                <div class="data-item">
                    <strong>Crepe Myrtle Area:</strong> <span id="moisture3">--</span>%
                </div>
            </div>
            
            <div class="card">
                <h2>ü§ñ AI Automation</h2>
                <div class="status">
                    <span class="status-dot online"></span>
                    <span>n8n Webhook Active</span>
                </div>
                <div class="data-item">
                    <strong>Next Check:</strong> In 2 hours
                </div>
                <div class="data-item">
                    <strong>Mow Confidence:</strong> 75%
                </div>
                <button class="btn" onclick="triggerAnalysis()">Run Analysis Now</button>
            </div>
        </div>
        
        <div class="footer">
            <p>Hughes Lawn AI ¬© 2024 | Powered by Azure & n8n</p>
            <p>API Endpoint: <code>/api/status</code> | Webhook: <code>/webhook</code></p>
        </div>
    </div>
    
    <script>
        async function fetchWeatherData() {
            try {
                const response = await fetch('/api/weather');
                const data = await response.json();
                document.getElementById('temp').textContent = data.temperature + '¬∞F';
                document.getElementById('humidity').textContent = data.humidity + '%';
                document.getElementById('rainfall').textContent = data.rainfall_24h + ' in';
            } catch (error) {
                console.error('Error fetching weather:', error);
            }
        }
        
        async function testConnection() {
            alert('Testing RainBird connection to ' + '{{ rainbird_ip }}');
        }
        
        async function triggerAnalysis() {
            try {
                const response = await fetch('/api/analyze', { method: 'POST' });
                const data = await response.json();
                alert('Analysis complete: ' + data.message);
            } catch (error) {
                alert('Error running analysis');
            }
        }
        
        // Fetch data on load
        fetchWeatherData();
        setInterval(fetchWeatherData, 60000); // Update every minute
    </script>
</body>
</html>
'''

@app.route('/')
def index():
    """Main dashboard"""
    return render_template_string(DASHBOARD_HTML, rainbird_ip=RAINBIRD_IP)

@app.route('/api/status')
def api_status():
    """API status endpoint"""
    return jsonify({
        'status': 'online',
        'timestamp': datetime.now().isoformat(),
        'services': {
            'ecowitt': 'configured',
            'rainbird': f'configured at {RAINBIRD_IP}',
            'n8n': 'webhook ready',
            'database': 'cloud storage'
        }
    })

@app.route('/api/weather')
def api_weather():
    """Fetch weather data from Ecowitt"""
    try:
        response = requests.get(
            'https://api.ecowitt.net/api/v3/device/real_time',
            params={
                'application_key': ECOWITT_APP_KEY,
                'api_key': ECOWITT_API_KEY,
                'mac': ECOWITT_MAC,
                'call_back': 'all',
                'temp_unitid': 1,
                'rainfall_unitid': 12
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            weather_data = data.get('data', {}).get('outdoor', {})
            
            # Convert units
            temp_c = float(weather_data.get('temperature', {}).get('value', 0))
            temp_f = (temp_c * 9/5) + 32
            
            return jsonify({
                'temperature': round(temp_f, 1),
                'humidity': weather_data.get('humidity', {}).get('value', 0),
                'rainfall_24h': round(float(weather_data.get('rainfall_24h', {}).get('value', 0)) * 0.0393701, 2)
            })
    except Exception as e:
        logger.error(f"Weather API error: {e}")
    
    return jsonify({
        'temperature': 75,
        'humidity': 65,
        'rainfall_24h': 0.0
    })

@app.route('/api/analyze', methods=['POST'])
def api_analyze():
    """Trigger n8n analysis"""
    try:
        # Send to n8n webhook
        response = requests.post(
            N8N_WEBHOOK_URL,
            json={
                'action': 'analyze_moisture',
                'timestamp': datetime.now().isoformat(),
                'source': 'manual_trigger'
            },
            timeout=10
        )
        return jsonify({'status': 'success', 'message': 'Analysis triggered'})
    except Exception as e:
        logger.error(f"n8n webhook error: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/webhook', methods=['POST'])
def webhook():
    """Receive webhooks from n8n"""
    try:
        data = request.json
        logger.info(f"Webhook received: {data}")
        
        # Process the webhook data
        action = data.get('action')
        
        if action == 'irrigate':
            # Handle irrigation command
            zones = data.get('zones', [])
            return jsonify({
                'status': 'success',
                'message': f'Irrigation command received for {len(zones)} zones'
            })
        
        return jsonify({'status': 'success', 'message': 'Webhook processed'})
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/health')
def health():
    """Health check endpoint"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=False)
